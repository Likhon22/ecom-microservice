// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package userpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerRequestMultiError, or nil if none found.
func (m *CreateCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateCustomerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateCustomerRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := CreateCustomerRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return CreateCustomerRequestMultiError(errors)
	}

	return nil
}

func (m *CreateCustomerRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateCustomerRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerRequestMultiError) AllErrors() []error { return m }

// CreateCustomerRequestValidationError is the validation error returned by
// CreateCustomerRequest.Validate if the designated constraints aren't met.
type CreateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerRequestValidationError) ErrorName() string {
	return "CreateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerRequestValidationError{}

// Validate checks the field values on DeleteCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerRequestMultiError, or nil if none found.
func (m *DeleteCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = DeleteCustomerRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCustomerRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteCustomerRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *DeleteCustomerRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// DeleteCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerRequestMultiError) AllErrors() []error { return m }

// DeleteCustomerRequestValidationError is the validation error returned by
// DeleteCustomerRequest.Validate if the designated constraints aren't met.
type DeleteCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerRequestValidationError) ErrorName() string {
	return "DeleteCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerRequestValidationError{}

// Validate checks the field values on GetCustomerByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerByEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerByEmailRequestMultiError, or nil if none found.
func (m *GetCustomerByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetCustomerByEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomerByEmailRequestMultiError(errors)
	}

	return nil
}

func (m *GetCustomerByEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetCustomerByEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetCustomerByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomerByEmailRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCustomerByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerByEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerByEmailRequestMultiError) AllErrors() []error { return m }

// GetCustomerByEmailRequestValidationError is the validation error returned by
// GetCustomerByEmailRequest.Validate if the designated constraints aren't met.
type GetCustomerByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerByEmailRequestValidationError) ErrorName() string {
	return "GetCustomerByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerByEmailRequestValidationError{}

// Validate checks the field values on CreateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerResponseMultiError, or nil if none found.
func (m *CreateCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Status

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for AvatarUrl

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return CreateCustomerResponseMultiError(errors)
	}

	return nil
}

// CreateCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerResponseMultiError) AllErrors() []error { return m }

// CreateCustomerResponseValidationError is the validation error returned by
// CreateCustomerResponse.Validate if the designated constraints aren't met.
type CreateCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerResponseValidationError) ErrorName() string {
	return "CreateCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerResponseValidationError{}

// Validate checks the field values on DeleteCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerResponseMultiError, or nil if none found.
func (m *DeleteCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteCustomerResponseMultiError(errors)
	}

	return nil
}

// DeleteCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerResponseMultiError) AllErrors() []error { return m }

// DeleteCustomerResponseValidationError is the validation error returned by
// DeleteCustomerResponse.Validate if the designated constraints aren't met.
type DeleteCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerResponseValidationError) ErrorName() string {
	return "DeleteCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerResponseValidationError{}

// Validate checks the field values on GetCustomersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomersRequestMultiError, or nil if none found.
func (m *GetCustomersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCustomersRequestMultiError(errors)
	}

	return nil
}

// GetCustomersRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomersRequestMultiError) AllErrors() []error { return m }

// GetCustomersRequestValidationError is the validation error returned by
// GetCustomersRequest.Validate if the designated constraints aren't met.
type GetCustomersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomersRequestValidationError) ErrorName() string {
	return "GetCustomersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomersRequestValidationError{}

// Validate checks the field values on GetCustomersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomersResponseMultiError, or nil if none found.
func (m *GetCustomersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCustomersResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCustomersResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCustomersResponseValidationError{
					field:  fmt.Sprintf("Customers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCustomersResponseMultiError(errors)
	}

	return nil
}

// GetCustomersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCustomersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomersResponseMultiError) AllErrors() []error { return m }

// GetCustomersResponseValidationError is the validation error returned by
// GetCustomersResponse.Validate if the designated constraints aren't met.
type GetCustomersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomersResponseValidationError) ErrorName() string {
	return "GetCustomersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomersResponseValidationError{}
